
  //this is essentially same as RecursiveEP.getEndPointOnePath, need to change them soon.
  /*
  def getEndPoint(lastEndPoint:CordPair,isAbs:Boolean,path:A)=
   path match{
     case path: EllipsePath => EllipseCommandHelper.getEndPoint(lastEndPoint,isAbs,path.asInstanceOf[EllipsePath])
     case path: CurvePath => if (isAbs) path.eP else CordPair(lastEndPoint.x+path.eP.x,lastEndPoint.y+path.eP.y)
     case path: QBCPath => if (isAbs) path.eP else CordPair(lastEndPoint.x+path.eP.x,lastEndPoint.y+path.eP.y)
     case path: LinePath => if (isAbs) path.eP else CordPair(lastEndPoint.x+path.eP.x,lastEndPoint.y+path.eP.y)
     case path: HLPath => if (isAbs) CordPair(path.eP,lastEndPoint.y) else CordPair(lastEndPoint.x+path.eP,lastEndPoint.y)
     case path: VLPath => if (isAbs) CordPair(lastEndPoint.x,path.eP) else CordPair(lastEndPoint.x,lastEndPoint.y+path.eP)
     case path: MovePath => if (isAbs) path.eP else CordPair(lastEndPoint.x+path.eP.x,lastEndPoint.y+path.eP.y)
     case _ => ???
   }
  */


  /*
  def getPathElementBB(p:PathCommand,lep:CordPair):Rectangle=
    p match{
      case p:QBC => p.getBoundingBox(lep,p.isAbsolute,p.args,Rectangle(0,0,0,0))
      case p:EllipseCommand => getBB[EllipseCommand](p.asInstanceOf[EllipseCommand],lep)
      case p: Line => getBB[Line](p.asInstanceOf[Line],lep)
      case p: HL => getBB[HL](p.asInstanceOf[HL],lep)
      case p: VL => getBB[VL](p.asInstanceOf[VL],lep)
      case p: SMC => getBB[SMC](p.asInstanceOf[SMC],lep)
      case p:SmQBC => getBB[SmQBC](p.asInstanceOf[SmQBC],lep)
      case _ => ???

    }
  def getLastEndPoint(p:PathCommand,lep:CordPair):CordPair={
    p match{
      case p:QBC => new RecursiveEP[QBCPath].getEndPoint(lep,p.isAbsolute,p.args)
      case p:EllipseCommand => new RecursiveEP[EllipsePath].getEndPoint(lep,p.isAbsolute,p.args)
      case p: Line => new RecursiveEP[LinePath].getEndPoint(lep,p.isAbsolute,p.args)
      case p: HL => new RecursiveEP[HLPath].getEndPoint(lep,p.isAbsolute,p.args)
      case p: VL => new RecursiveEP[VLPath].getEndPoint(lep,p.isAbsolute,p.args)
      case p: SMC => new RecursiveEP[SMCPath].getEndPoint(lep,p.isAbsolute,p.args)
      case p:SmQBC => new RecursiveEP[SmQBCPath].getEndPoint(lep,p.isAbsolute,p.args)
      case _ => ???
    }
  }


  def getBB[A<: PathCommand](p:A,lep:CordPair):Rectangle=
    p match {
      case p: QBC => p.getBoundingBox[QBCPath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: EllipseCommand => p.getBoundingBox[EllipsePath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: Line => p.getBoundingBox[LinePath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: HL => p.getBoundingBox[HLPath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: VL => p.getBoundingBox[VLPath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: SMC => p.getBoundingBox[SMCPath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case p: SmQBC => p.getBoundingBox[SmQBCPath](lep, p.isAbsolute, p.args,Rectangle (0, 0, 0, 0))
      case _ => ???
    }
  */